{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","MemeGenerator","state","topText","bottomText","randImage","allMemeImgs","handleChange","bind","genImage","fetch","then","response","json","memes","data","setState","event","target","name","value","this","prevState","index","Math","floor","random","length","url","className","placeholder","onChange","type","onClick","src","alt","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAUeA,MARf,WACI,OACI,iCACI,kD,cC8DGC,E,kDAhEX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBATP,E,gEAYO,IAAD,OACfE,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CAACV,YAAaQ,S,mCAI3BG,GAAO,IAAD,EACOA,EAAMC,OAArBC,EADQ,EACRA,KAAMC,EADE,EACFA,MACbC,KAAKL,SAAL,eACKG,EAAMC,M,iCAKXC,KAAKL,UAAS,SAAAM,GACV,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAUhB,YAAYqB,QAC/D,MAAO,CAACtB,UAAWiB,EAAUhB,YAAYiB,GAAOK,U,+BAMpD,OACI,gCACI,uBAAMC,UAAU,YAAhB,UACI,uBACIV,KAAK,UACLW,YAAY,WACZV,MAAOC,KAAKnB,MAAMC,QAClB4B,SAAUV,KAAKd,eAEnB,uBACIY,KAAK,aACLW,YAAY,cACZV,MAAOC,KAAKnB,MAAME,WAClB2B,SAAUV,KAAKd,eAEnB,wBAAQyB,KAAK,SAASC,QAASZ,KAAKZ,SAApC,oBAEJ,sBAAKoB,UAAU,OAAf,UACI,qBAAKK,IAAKb,KAAKnB,MAAMG,UAAW8B,IAAI,KACpC,oBAAIN,UAAU,MAAd,SAAqBR,KAAKnB,MAAMC,UAChC,oBAAI0B,UAAU,SAAd,SAAwBR,KAAKnB,MAAME,uB,GA1D3BgC,IAAMC,WCgBnBC,E,kDAbX,aAAc,wC,qDAIV,OACI,gCACI,cAAC,EAAD,IACA,cAAC,EAAD,W,GAREF,IAAMC,WCQTE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c7508a13.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Header() {\n    return (\n        <header>\n            <p>Meme Generator</p>\n        </header>\n    )\n}\n\nexport default Header","import React from \"react\"\n\nclass MemeGenerator extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randImage: \"http://i.imgflip.com/1bij.jpg\",\n            allMemeImgs: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.genImage = this.genImage.bind(this)\n    }\n    \n    componentDidMount(){\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                const {memes} = response.data\n                this.setState({allMemeImgs: memes})\n            })\n    }\n    \n    handleChange(event){\n        const {name, value} = event.target\n        this.setState({\n            [name]:value\n        })\n    }\n    \n    genImage(){\n        this.setState(prevState => {\n            const index = Math.floor(Math.random() * prevState.allMemeImgs.length)\n            return({randImage: prevState.allMemeImgs[index].url})\n        })\n        //console.log(Math.floor(Math.random() * this.state.allMemeImgs.length))\n    }\n    \n    render(){\n        return(\n            <div>\n                <form className=\"meme-form\">\n                    <input \n                        name=\"topText\"\n                        placeholder=\"Top Text\"\n                        value={this.state.topText}\n                        onChange={this.handleChange}\n                    />\n                    <input \n                        name=\"bottomText\"\n                        placeholder=\"Bottom Text\"\n                        value={this.state.bottomText}\n                        onChange={this.handleChange}\n                    />\n                    <button type=\"button\" onClick={this.genImage}>Gen</button>\n                </form>\n                <div className=\"meme\">\n                    <img src={this.state.randImage} alt=\"\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MemeGenerator","import React from \"react\"\nimport Header from \"./Header\"\nimport MemeGenerator from \"./MemeGenerator\"\n\nclass App extends React.Component{\n    constructor(){\n        super()\n    }\n    render(){\n        return(\n            <div>\n                <Header />\n                <MemeGenerator />\n            </div>\n        )\n    }\n}\n\nexport default App ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}